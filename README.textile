h1. Plugins for Textpattern CMS

h2. tok_osm_leaflet

_tok_osm_leaflet_ displays a map based on OpenStreetMap data using the leaflet javascript library. Width and height of map div are configurable and of course the portion to be shown. A marker may be set on the landscape for adding a textual comment. A detailed instruction with examples is included on the plugins help page.

* "source":tok_osm_leaflet.php
* "installable snippet":https://github.com/torsk/txp_plugins/raw/master/tok_osm_leaflet.txt

h3. version history

h4. version 0.3

* allows multiple maps per page; important e. g. for overview pages
* enabled to use leaflet code and style that is stored on the web server (to have an independent access to the files or to allow changes of style and images)

h4. version 0.2

* released to the public


h2. tok_next_weekly

_tok_next_weekly_ calculates the upcoming occurrence of a weekly recurring date. The output is widely configurable through strftime compatibility. A detailed instruction with examples is included on the plugins help page.

* "source":tok_next_weekly.php
* "installable snippet":https://github.com/torsk/txp_plugins/raw/master/tok_next_weekly.txt


h2. tok_owm_current

_tok_owm_current_ makes the current weather data from "http://www.openweathermap.org":http://www.openweathermap.org available as textpattern plugin. The output is widely configurable; documentation and examples are included on the plugins help page. However, you need an "OpenWeatherMap API Key":http://openweathermap.org/appid to use this plugin.

* "source":tok_owm_current.php
* "installable snippet":https://github.com/torsk/txp_plugins/raw/master/tok_owm_current.txt

h2. Not a Textpattern plugin: @tok_image_upload_bot.py@

The procedure of uploading, managing and selecting images in txp is indeed usable, but does not reflect my way of working.

I get my photos from the camera to the PC, roughly sorted by date, then use an image viewer (»geeqie«, http://geeqie.sourceforge.net/) to look through, sort, select for publication and write an image description.

When I write an article in txp and want to include a photo, I do not want to switch from the "Write"-tab to the "Images"-tab, but have geeqie (the image viewer) still opened on the desktop. So I use the image viewer for uploading the image to textpattern, setting category and caption automatically on the server and to get the ID-number of my uploaded picture.

h3. How do I do that?

*First:* Images selected for publication are saved to a special  directory; even to a special subdirectory inside the special  directory. The first special directory was created to simply collect  all images selected for publication (so let's call it "@upload@"). The subdirectories inside are named according to the categories the  images are sorted by. So for a sports blog you might have "@/upload/football/@", "@/upload/tennis/@", "@/upload/golf/@", etc. (This should be self-explanatory even if you have not the slightest idea of @tok_image_upload_bot.py@.) Sorting images this way  should be done by a mouse click in every image viewer.

*Second:* There is a little helper script (written in python3) which  is plugged into the image viewer (but may also be used from the  command line) and does all the work: It creates a resized image and a  thumbnail too, uploads both, sets the category, the caption too if one was set and shows the ID-number, that was given to the image from  the server, in a little window on the screen. All this triggered by  one mouse click -- and even more: You might select multiple files and  they all will be processed successively in one go. This helper script is @tok_image_upload_bot.py@

h3. What you have to do (if you want to use @tok_image_upload_bot.py@ too)

Minimal requirement is to provide *online credentials* in the section with the same name at the beginning of the file. Please set up @Txp_Login_URL@, @Txp_Userid@ and @Txp_Password@.

In the following section in the script file, "@new images settings@", you might set the *maximum dimensions* of the full size image as well as the thumbnail. Also please set a default category, which will be used, when an invalid category name was given during upload (the subdirectory, supra).

Next one, the caption: The script takes the value of *@Xmp.dc.description@*. Other variants (like "@Exif.UserComment@") should be possible, but are not yet implemented. Defined here are the start and end of the search area and in-between the regular expression to extract the data.

Further configuration should not be necessary, but you might want to extend the script to your needs. I'd love to hear from your modifications.

h3. Embed the script in your image viewer (just for convenience)

You might call the @tok_image_upload_bot.py@ on the command line and pass the image file(s) as parameters to it. I integrated the script as an "editor" in my image viewer "geeqie" by creating a desktop-file like

bc. [Desktop Entry]
Version=1.0
Type=Application
Name=Upload image to blog
Exec=/path/to/tok_image_upload_bot.py %F
Categories=X-Geeqie;
OnlyShowIn=X-Geeqie;
X-Geeqie-Menu-Path=EditMenu/FileOpsSection
X-Geeqie-Filter=false

and set it as an editor (copied to @~/.config/geeqie/applications/@). To call the script, right click the mouse on an image (or selected images) and select "Upload image to blog" from the edit menu.

h3. Screenshot

A really tiny program window keeps you informed about every single step of the process:

!https://raw.githubusercontent.com/torsk/txp_plugins/master/tok_image_upload_bot-screenshot.png!

h3. experiences

I used this script (or its predecessor) for a long time. But under linux only. There is not yet any practical knowledge with other operating systems. Some tweaking might be necessary, but I'm willing to improve the script with the help of its users.

h3. The code

* "Viewable":tok_image_upload_bot.py
* "Download":https://github.com/torsk/txp_plugins/raw/master/tok_image_upload_bot.py
